# vim: set filetype=sh :

# =========
# Config
# =========
CITY_EN=Cologne

# =========
# Functions
# =========

my_gitweb(){
    if git status 2>&1 > /dev/null ; then
        url=`git remote -v | grep fetch | head -1 | cut -f2 | cut -d' ' -f1 | sed -e's/git@/http:\/\//' -e's/\.git$//' | sed -E 's/(\/\/[^:]*):/\1\//'`;
        url_with_path=$url/tree/$(git rev-parse --abbrev-ref HEAD)/$(git rev-parse --show-prefix)
        if [ "${OSTYPE//[0-9.]/}" == "darwin" ]; then
            open $url_with_path
        else
            xdg-open $url_with_path;
        fi
  else
    echo "Not a git repo";
  fi
}


function contarArchivos() {
  #do things with parameters like $1 such as
  ls -l $1 | grep -v ^l | wc -l
}

weather_short(){
  curl -s "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=${@:-<YOURZIPORLOCATION>}"|perl -ne '/<title>([^<]+)/&&printf "%s: ",$1;/<fcttext>([^<]+)/&&print $1,"\n"';
}

weather_long(){
  curl wttr.in/$CITY_EN
}

mkcd(){
   mkdir -p $1;
   cd $1
}

weather(){
  if [ $# -gt 0 ]; then
    if [ $1 == "short" ];  then
      weather_short madrid
    else
      weather_long
    fi
  else
    weather_short madrid
  fi
}


shorten(){
   url_pattern="http"
   url=$1
   if ! [[ $url = $url_pattern* ]]; then
    url="http://$url"
   fi
   echo $(wget -q -O - "http://tny.im/yourls-api.php?action=shorturl&format=simple&url=$url&keyword=$2")
}

# In zsh, with certain glob options,
# multiplications will only work with
# "9*9"
# Others will work, e.g. 9/8
calculate(){
  bc -l <<< "$1";
}

function my_ip() # Get IP adress on ethernet.
{
    MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' |
      sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}
getFileGithub(){ rawUrl=`echo $1 | sed "s/github/raw.githubusercontent/g" | sed "s/blob\///"`; wget $rawUrl; }



recargarConfiguracion(){
    shellPid=`echo "$$"`
    usingShell=`ps -p $shellPid | egrep "[a-zA-Z]+sh" -o`

      if [ $usingShell = "bash" ]; then
      source ~/.bashrc;
    elif [ $usingShell = "zsh" ]; then
      source ~/.zshrc;
    fi
}

# https://www.gregjs.com/linux/2016/upgrade-your-terminal-with-bash-functions-for-matching-text-in-filenames-or-contents/
function match_filename() {
  find "$1" -iname "*$2*" -print
}
function match_contents() {
  grep -Ri "$1" -e "$2"
}
function matchrun_filename() {
  find "$1" -iname "*$2*" -print0 | xargs -0 ls -l
}
function matchrun_contents() {
  grep -Ri "$1" -e "$2" -lZ | xargs -0 "${@:3}"
}

# Download youtube asset to mp3
function ytmp3() {
    if [ $# -eq 0 ]; then
        echo "Usage:"
        echo "$0 \"artist song\"";
        echo "$0 \"some query\"";
    else
        which youtube-dl > /dev/null;
        if [ $? -eq 0 ]; then
            youtube-dl -x --audio-format "mp3" --audio-quality 0 "$@"
        else
            echo "Need to have youtube-dl installed";
        fi
    fi
}


function musicy() {
    if [ $# -eq 0 ]; then
        echo "Usage:"
        echo "$0 \"artist song\"";
        echo "$0 \"some query\"";
    else
        which youtube-dl > /dev/null;
        if [ $? -ne 0 ]; then
            echo "Need to have youtube-dl installed";
        fi
        which mpv > /dev/null;
        if [ $? -eq 0 ]; then
            # Actual command
            mpv --no-video --ytdl-format=bestaudio ytdl://ytsearch10:"$@"
        else
            echo "Need to have mpv installed";
        fi
    fi
}

docker-ps(){
    docker ps | grep $1 | tr -s ' ' | cut -d ' ' -f 1
}
docker-volumes(){
    docker inspect -f '{{ .Mounts  }}' $(docker-ps $1)
}

getCoinInfo(){
   if [[ $# -lt 1 || $# -ge 3  ]]; then
       echo "wrong!"
       echo
       echo "Usage:"
       echo "-----"
       echo "    $0 COIN FIAT (ticker)"
   else
       COIN=$1
       if [[ $# -eq 2 ]]; then
           FIAT=$2
       else
           FIAT="usd"
       fi
       curl -s https://api.coinmarketcap.com/v1/ticker/$COIN/?convert=$FIAT | jq ".[0].price_$FIAT" | tr -d '"'
   fi
}


tmux-command (){
    tmux new-session -d -s "$1" $1
}


bakdate(){
    if [ -f $1 ]; then
        original=$(basename "$1")
        extension="${original##*.}"
        filename="${original%.*}"
        new_filename="$filename-$(date +'%Y%m%d%H%M%S').$extension"
        mv "$original" "$new_filename"
        echo "renamed from $original to $new_filename"
    else
        echo "File \"$1\" does not exist"
    fi
}

getCoinInfo(){
    FROM=$1
    FIAT=usd
    if [ ! -z "$2" ]; then
        FIAT="$2";
    fi
    curl -s https://api.coinmarketcap.com/v1/ticker/${FROM}/?convert=eur | jq ".[0].price_${FIAT}" | tr -d '"'
}

getCoins(){
    echo "dollars/ADA";
    getCoinInfo cardano usd
    echo "--------";

    echo "euros/ADA";
    getCoinInfo cardano eur
    echo "--------";

    echo "btc/eur"
    getCoinInfo bitcoin eur
    echo "--------";

    echo "btc/usd"
    getCoinInfo bitcoin usd
    echo "--------";
}

getCoinsLoop(){
    REFRESH_RATE=${1:=5}
    while true; do
        getCoins
        sleep $REFRESH_RATE
        clear;
    done
}

gbranches(){
    git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
}

bak() {
    FILENAME=$1;
    cp $FILENAME ${FILENAME}_$(date +%Y%m%d_%H%M%S).bak;
}

# ignores anything after the period if you feed it one
#âžœ epoch-to-date 1594396667
#Fri Jul 10 17:57:47 CEST 2020
fun epoch-to-date() {
    epoch_seconds=$(echo $1 | cut -d '.' -f 1)
    if [ "$(uname)" == "Darwin" ]; then
        date -r $epoch_seconds
    fi
}

# In the ideal case, saves current branch, switches to the main/master branch,
# does a pull, then switches to the saved branch and rebases main/master on top
# of it. If current branch is dirty, will will fail
function pull-rebase() {
	CONFIG_DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD --short | cut -d '/' -f 2)
	DEFAULT_BRANCH=${CONFIG_DEFAULT_BRANCH:-master}
	PREVIOUS_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
	git co $DEFAULT_BRANCH \
		&& git pull \
		&& git co $PREVIOUS_BRANCH \
		&& git rebase $DEFAULT_BRANCH \
		&& echo "rebase succeeded" || echo "rebase failed"
}

function c() {
    cd $1;
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        ls -lha --color
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        gls -lha --color
    fi
}

function git-sha-in-tag() {
    if [ $# -ne 2 ]; then
        echo "Usage:"
        echo "	$0 SHA_OF_COMMIT TAG"
	else
        SHA=$1
        AG="$2"
        git tag --contains "$SHA" grep "$TAG" && echo "it does contain it!" || echo "NOPE"
    fi
}

function get-current-folder() {
    echo $(basename $(pwd))
}

function bashman () {
    man bash | less -p "^       $1 "
}

function create-tunnel() {
    if [ $# -ne 2 ]; then
        echo "Usage:\n"
        echo "\t$0 HOST PORT"
        echo "\t$0 dev-poc01a.something.com 8443"
    else
        HOST="$1"
        PORT="$2"
        ssh -f -T -N -L $PORT":localhost:"$PORT $HOST
    fi
}

alias cdl='cd $_'


function record-ffmpeg () {
    if [ $# -eq 2 ]; then
        URL="$1"
        DESTINATION="$2"
        ffmpeg -i "$URL" -c copy -f mpegts "$DESTINATION"
    else
        echo "Usage:"
        echo -e "$0 URL DESTINATION"
    fi
}

function pollama() {
    MODEL=$(ollama ls | grep -v "^NAME" | tr '\t' ' ' | cut -d ' ' -f 1 | fzf)
    echo "Your chosen model is $MODEL"
    ollama run "$MODEL"
}

function clone-cd() {
    URL="$1"
    REPO_NAME="$(echo $URL | rev | cut -d '/' -f 1 | cut -d '.' -f 2 | rev)"
    git clone "$URL" && cd $REPO_NAME
    echo
    pwd
}

function select-tmux {
    TMUX_CONTENT=$(tmux ls)
    SELECTED_SESSION_FULL=$(echo $TMUX_CONTENT | fzf)
    SELECTED_SESSION=$(echo $SELECTED_SESSION_FULL | cut -d ':' -f 1)
    if [ ! -z "$SELECTED_SESSION" ]; then
        echo "selected $SELECTED_SESSION"
        echo will switch to it
        if [ -z "$TMUX" ]; then
            # it's outside of tmux
            tmux a -t "$SELECTED_SESSION"
        else
            tmux switch -t "$SELECTED_SESSION"
        fi
    else
        echo "No session selected, will do nothing"
    fi
}

check-internet() {
    until ping -W 1 -c 1 8.8.8.8; do sleep 2; done
}


function git-author() {
    AUTHOR="$1"
    if [ -z "$AUTHOR" ]; then
        echo "You should use it like so"
        echo
        echo "\t $0 'Peter Pan'"
    else
        git log --author="$AUTHOR"
    fi
}


jwt() {
    TOKEN="$1"
    if [ -z "$TOKEN" ]; then
        echo "You should use it like so"
        echo
        echo "\t $0 'SOME_JWT_TOKEN'"
    else
        docker run --rm bitnami/jwt-cli:6.2.0-debian-12-r16 decode "$TOKEN"
    fi
}

jwt-jwt() {
    TOKEN="$1"
    if [ -z "$TOKEN" ]; then
        echo "You should use it like so"
        echo
        echo "\t $0 'SOME_JWT_TOKEN'"
    else
        echo
        echo
        echo "The user id (in keycloak) is *sub*"
        RESULT=$(jwt "$TOKEN")
        echo $RESULT
        echo
        echo "and this is the refresh token unfolded"
        echo
        REFRESH_TOKEN="$(echo $RESULT | grep 'Token claims' -A 999 | grep '{' -A 999 | jq '.refreshTokenValue' | tr -d '"'))"
        echo "Refresh token: ${REFRESH_TOKEN}"
        docker run --rm bitnami/jwt-cli:6.2.0-debian-12-r16 decode ${REFRESH_TOKEN}
    fi
}



function git-log-exclude() {
    AUTHOR_REGEX="$1"
    # git log --perl-regexp --author='^((?!semantic-release-bot).*)$'
    git log --perl-regexp --author="^((?!$1).*)$"
}

function git-logp-exclude() {
    AUTHOR_REGEX="$1"
    # git log --perl-regexp --author='^((?!semantic-release-bot).*)$'
    git log -p --perl-regexp --author="^((?!$1).*)$"
}



function tmux-cd() {
    if [ $# -lt 1 ]; then
        echo "Usage:"
        echo "\t$0 FOLDER_TO_START_TMUX_FROM"
        exit 1
    fi
    FOLDER="$(readlink -f $1)"
    SESSION_NAME="$(basename ${FOLDER})"
    echo "If there's an existing session with name: ${SESSION_NAME}, will switch to it"
    echo "If there isn't, will create a session named: ${SESSION_NAME} with name: ${SESSION_NAME}"
    tmux a -t ${SESSION_NAME} || tmux new -s "${SESSION_NAME}" -c "$FOLDER"
}

function review-pr() {
    PR_NUMBER=$(git ls-remote origin | grep pull | grep head | cut -f 2 | cut -d '/' -f 3 | sort -u | tr ' ' '\n' | fzf)
    if [ -z "$PR_NUMBER" ]; then
        echo "You didn't select a PR number, will do nothing"
        exit 1
    fi
    echo "You selected PR: $PR_NUMBER"
    CURRENT_PROJECT="$(basename $(pwd))"
    echo "Current project is: ${CURRENT_PROJECT}"
    BRANCH_TO_REVIEW="pull/${PR_NUMBER}/head"
    echo "Branch to review is: $BRANCH_TO_REVIEW"
    LOCAL_BRANCH_NAME="pr-${PR_NUMBER}--$(date +%Y-%m-%d-%H%M)"
    echo "Will fetch PR remote branch, and create a local PR branch with name: $LOCAL_BRANCH_NAME"
    git fetch origin $BRANCH_TO_REVIEW:$LOCAL_BRANCH_NAME
    NEW_FOLDER_NAME="../${CURRENT_PROJECT}-PR-${PR_NUMBER}--$(date +%Y-%m-%d-%H%M)"
    git worktree add $NEW_FOLDER_NAME ${LOCAL_BRANCH_NAME}
    echo "Created a repo @ ${NEW_FOLDER_NAME}"
    if [ $# -eq 1 ]; then
        if [ "$1" = "-i" ]; then
            USE_INTELLIJ="YES"
        fi
    fi
    if [ -z "$USE_INTELLIJ" ]; then
        echo "Want to open intellij for that PR?"
        sleep 2
        USE_INTELLIJ=$(echo "YES\nNO" | fzf)
    fi
    if [ "$USE_INTELLIJ" = "YES" ]; then
        idea ${NEW_FOLDER_NAME}
    fi
}
