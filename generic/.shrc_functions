# vim: set filetype=sh :

# =========
# Config
# =========
CITY_EN=Cologne

# =========
# Functions
# =========

my_gitweb(){
    if git status 2>&1 > /dev/null ; then
        url=`git remote -v | grep fetch | head -1 | cut -f2 | cut -d' ' -f1 | sed -e's/git@/http:\/\//' -e's/\.git$//' | sed -E 's/(\/\/[^:]*):/\1\//'`;
        url_with_path=$url/tree/$(git rev-parse --abbrev-ref HEAD)/$(git rev-parse --show-prefix)
        if [ "${OSTYPE//[0-9.]/}" == "darwin" ]; then
            open $url_with_path
        else
            xdg-open $url_with_path;
        fi
  else
    echo "Not a git repo";
  fi
}


function contarArchivos() {
  #do things with parameters like $1 such as
  ls -l $1 | grep -v ^l | wc -l
}

weather_short(){
  curl -s "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=${@:-<YOURZIPORLOCATION>}"|perl -ne '/<title>([^<]+)/&&printf "%s: ",$1;/<fcttext>([^<]+)/&&print $1,"\n"';
}

weather_long(){
  curl wttr.in/$CITY_EN
}

mkcd(){
   mkdir -p $1;
   cd $1
}

weather(){
  if [ $# -gt 0 ]; then
    if [ $1 == "short" ];  then
      weather_short madrid
    else
      weather_long
    fi
  else
    weather_short madrid
  fi
}


shorten(){
   url_pattern="http"
   url=$1
   if ! [[ $url = $url_pattern* ]]; then
    url="http://$url"
   fi
   echo $(wget -q -O - "http://tny.im/yourls-api.php?action=shorturl&format=simple&url=$url&keyword=$2")
}

# In zsh, with certain glob options,
# multiplications will only work with
# "9*9"
# Others will work, e.g. 9/8
calculate(){
  bc -l <<< "$1";
}

function my_ip() # Get IP adress on ethernet.
{
    MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' |
      sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}
getFileGithub(){ rawUrl=`echo $1 | sed "s/github/raw.githubusercontent/g" | sed "s/blob\///"`; wget $rawUrl; }



recargarConfiguracion(){
    shellPid=`echo "$$"`
    usingShell=`ps -p $shellPid | egrep "[a-zA-Z]+sh" -o`

      if [ $usingShell = "bash" ]; then
      source ~/.bashrc;
    elif [ $usingShell = "zsh" ]; then
      source ~/.zshrc;
    fi
}

# https://www.gregjs.com/linux/2016/upgrade-your-terminal-with-bash-functions-for-matching-text-in-filenames-or-contents/
function match_filename() {
  find "$1" -iname "*$2*" -print
}
function match_contents() {
  grep -Ri "$1" -e "$2"
}
function matchrun_filename() {
  find "$1" -iname "*$2*" -print0 | xargs -0 ls -l
}
function matchrun_contents() {
  grep -Ri "$1" -e "$2" -lZ | xargs -0 "${@:3}"
}

# Download youtube asset to mp3
function ytmp3() {
    if [ $# -eq 0 ]; then
        echo "Usage:"
        echo "$0 \"artist song\"";
        echo "$0 \"some query\"";
    else
        which youtube-dl > /dev/null;
        if [ $? -eq 0 ]; then
            youtube-dl -x --audio-format "mp3" --audio-quality 0 "$@"
        else
            echo "Need to have youtube-dl installed";
        fi
    fi
}


function musicy() {
    if [ $# -eq 0 ]; then
        echo "Usage:"
        echo "$0 \"artist song\"";
        echo "$0 \"some query\"";
    else
        which youtube-dl > /dev/null;
        if [ $? -ne 0 ]; then
            echo "Need to have youtube-dl installed";
        fi
        which mpv > /dev/null;
        if [ $? -eq 0 ]; then
            # Actual command
            mpv --no-video --ytdl-format=bestaudio ytdl://ytsearch10:"$@"
        else
            echo "Need to have mpv installed";
        fi
    fi
}

docker-ps(){
    docker ps | grep $1 | tr -s ' ' | cut -d ' ' -f 1
}
docker-volumes(){
    docker inspect -f '{{ .Mounts  }}' $(docker-ps $1)
}

getCoinInfo(){
   if [[ $# -lt 1 || $# -ge 3  ]]; then
       echo "wrong!"
       echo
       echo "Usage:"
       echo "-----"
       echo "    $0 COIN FIAT (ticker)"
   else
       COIN=$1
       if [[ $# -eq 2 ]]; then
           FIAT=$2
       else
           FIAT="usd"
       fi
       curl -s https://api.coinmarketcap.com/v1/ticker/$COIN/?convert=$FIAT | jq ".[0].price_$FIAT" | tr -d '"'
   fi
}


tmux-command (){
    tmux new-session -d -s "$1" $1
}


bakdate(){
    if [ -f $1 ]; then
        original=$(basename "$1")
        extension="${original##*.}"
        filename="${original%.*}"
        new_filename="$filename-$(date +'%Y%m%d%H%M%S').$extension"
        mv "$original" "$new_filename"
        echo "renamed from $original to $new_filename"
    else
        echo "File \"$1\" does not exist"
    fi
}

getCoinInfo(){
    FROM=$1
    FIAT=usd
    if [ ! -z "$2" ]; then
        FIAT="$2";
    fi
    curl -s https://api.coinmarketcap.com/v1/ticker/${FROM}/?convert=eur | jq ".[0].price_${FIAT}" | tr -d '"'
}

getCoins(){
    echo "dollars/ADA";
    getCoinInfo cardano usd
    echo "--------";

    echo "euros/ADA";
    getCoinInfo cardano eur
    echo "--------";

    echo "btc/eur"
    getCoinInfo bitcoin eur
    echo "--------";

    echo "btc/usd"
    getCoinInfo bitcoin usd
    echo "--------";
}

getCoinsLoop(){
    REFRESH_RATE=${1:=5}
    while true; do
        getCoins
        sleep $REFRESH_RATE
        clear;
    done
}

gbranches(){
    git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
}

bak() {
    FILENAME=$1;
    cp $FILENAME ${FILENAME}_$(date +%Y%m%d_%H%M%S).bak;
}

# ignores anything after the period if you feed it one
#âžœ epoch-to-date 1594396667
#Fri Jul 10 17:57:47 CEST 2020
fun epoch-to-date() {
    epoch_seconds=$(echo $1 | cut -d '.' -f 1)
    if [ "$(uname)" == "Darwin" ]; then
        date -r $epoch_seconds
    fi
}

function pull-rebase() {
	CONFIG_DEFAULT_BRANCH=$(git config init.defaultBranch)
	DEFAULT_BRANCH=${CONFIG_DEFAULT_BRANCH:-master}
	PREVIOUS_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
	git co $DEFAULT_BRANCH \
		&& git pull \
		&& git co $PREVIOUS_BRANCH \
		&& git rebase $DEFAULT_BRANCH \
		&& echo "rebase succeeded" || echo "rebase failed"
}

function c() {
    cd $1;
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        ls -lha --color
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        gls -lha --color
    fi
}

function git-sha-in-tag() {
    if [ $# -ne 2 ]; then
        echo "Usage:"
        echo "	$0 SHA_OF_COMMIT TAG"
	else
        SHA=$1
        AG="$2"
        git tag --contains "$SHA" grep "$TAG" && echo "it does contain it!" || echo "NOPE"
    fi
}

function get-current-folder() {
    echo $(basename $(pwd))
}

function bashman () {
    man bash | less -p "^       $1 "
}

function create-tunnel() {
    if [ $# -ne 2 ]; then
        echo "Usage:\n"
        echo "\t$0 HOST PORT"
        echo "\t$0 dev-poc01a.something.com 8443"
    else
        HOST="$1"
        PORT="$2"
        ssh -f -T -N -L $PORT":localhost:"$PORT $HOST
    fi
}

alias cdl='cd $_'


function record-ffmpeg () {
    if [ $# -eq 2 ]; then
        URL="$1"
        DESTINATION="$2"
        ffmpeg -i "$URL" -c copy -f mpegts "$DESTINATION"
    else
        echo "Usage:"
        echo -e "$0 URL DESTINATION"
    fi
}
