# vim: set filetype=sh :


VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
PATH=/usr/local/bin:$VIRTUALENVWRAPPER_PYTHON:$PATH
PATH="$PATH:/usr/local/go/bin"
PATH="$PATH:$HOME/scripts"
export PATH

# For vim backup stuff
mkdir -p ~/.vim/.backup ~/.vim/.swp ~/.vim/.undo

# Alias definitions.
if [ -f ~/Configs/.bash_aliases ]; then
. ~/Configs/.bash_aliases
fi

### Config with pw and other stuff
if [ -f ~/privateconfigs/.bash_other_stuff ]; then
. ~/privateconfigs/.bash_other_stuff
fi

if [ -f ~/Configs/.bashrc_dev_helpers ]; then
	. ~/Configs/.bashrc_dev_helpers
fi

# =========
# Functions
# =========

my_gitweb(){
if [ -d .git  ]; then
    	url=`git remote -v | grep fetch | head -1 | cut -f2 | cut -d' ' -f1 | sed -e's/git@/http:\/\//' -e's/\.git$//' | sed -E 's/(\/\/[^:]*):/\1\//'`;
		xdg-open $url;
	else
 		echo "Not a git repo";
	fi
}

function contarArchivos() {
	#do things with parameters like $1 such as
	ls -l $1 | grep -v ^l | wc -l
}

weather_short(){
  curl -s "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=${@:-<YOURZIPORLOCATION>}"|perl -ne '/<title>([^<]+)/&&printf "%s: ",$1;/<fcttext>([^<]+)/&&print $1,"\n"';
}

weather_long(){
  curl wttr.in/madrid
}

mkcd(){
   mkdir -p $1;
   cd $1
}

weather(){
  if [ $# -gt 0 ]; then
    if [ $1 == "short" ];  then
      weather_short madrid
    else
      weather_long
    fi
  else
    weather_short madrid
  fi
}


shorten(){
   curl -s "https://www.googleapis.com/urlshortener/v1/url?key=$GOOGLE_SHORTEN_API_KEY" -H 'Content-Type: application/json' -d "{'longUrl':      \"$1\"}" | jq ".id"
}

# In zsh, with certain glob options,
# multiplications will only work with
# "9*9"
# Others will work, e.g. 9/8
calculate(){
	bc -l <<< "$1";
}

function my_ip() # Get IP adress on ethernet.
{
    MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' |
      sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}
getFileGithub(){ rawUrl=`echo $1 | sed "s/github/raw.githubusercontent/g" | sed "s/blob\///"`; wget $rawUrl; }



recargarConfiguracion(){
		shellPid=`echo "$$"`
		usingShell=`ps -p $shellPid | egrep "[a-zA-Z]+sh" -o`

	    if [ $usingShell = "bash" ]; then
			source ~/.bashrc;
		elif [ $usingShell = "zsh" ]; then
			source ~/.zshrc;
		fi
}

# https://www.gregjs.com/linux/2016/upgrade-your-terminal-with-bash-functions-for-matching-text-in-filenames-or-contents/
function match_filename() {
  find "$1" -iname "*$2*" -print
}
function match_contents() {
  grep -Ri "$1" -e "$2"
}
function matchrun_filename() {
  find "$1" -iname "*$2*" -print0 | xargs -0 ls -l
}
function matchrun_contents() {
  grep -Ri "$1" -e "$2" -lZ | xargs -0 "${@:3}"
}

# Download youtube asset to mp3
function ytmp3() {
    if [ $# -eq 0 ]; then
        echo "Usage:"
        echo "$0 \"artist song\"";
        echo "$0 \"some query\"";
    else
        which youtube-dl > /dev/null;
        if [ $? -eq 0 ]; then
            youtube-dl -x --audio-format "mp3" --audio-quality 0 "$@"
        else
            echo "Need to have youtube-dl installed";
        fi
    fi
}


function musicy() {
    if [ $# -eq 0 ]; then
        echo "Usage:"
        echo "$0 \"artist song\"";
        echo "$0 \"some query\"";
    else
        which youtube-dl > /dev/null;
        if [ $? -ne 0 ]; then
            echo "Need to have youtube-dl installed";
        fi
        which mpv > /dev/null;
        if [ $? -eq 0 ]; then
            # Actual command
            mpv --no-video --ytdl-format=bestaudio ytdl://ytsearch10:"$@"
        else
            echo "Need to have mpv installed";
        fi
    fi
}

docker-ps(){
    docker ps | grep $1 | tr -s ' ' | cut -d ' ' -f 1
}

source ~/privateconfigs/.bash_generic
